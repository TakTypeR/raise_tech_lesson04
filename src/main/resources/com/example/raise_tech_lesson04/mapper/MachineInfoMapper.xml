<?xml version="1.0" encoding="UTF-8" ?>
<!--DTD:Document type Definition(文書型の定義):使用出来るタグや属性等の情報の定義-->
<!--Mapper.xmlはjava側のinterfaceと同一パッケージ内に配置する-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.raise_tech_lesson04.mapper.MachineInfoMapper">

    <!--resultMap: リレーション構造を持つの検索結果の内容をJava側のオブジェクトへどうマッピングするかの定義-->
    <!--複数のSQLで利用するので、classの様に最初に記述する-->
    <resultMap id="MachineInfoResultMap" type="com.example.raise_tech_lesson04.entity.MachineInfo">
        <!--property: java側プロパティ column: SQLのカラム-->
        <!--column: SQL文でasによる別名を付けていたらそれを指定(オリジナルの名前だとダメ？)-->
        <!--カラム/Java側の内容によって、正しい属性を指定する-->
        <!--https://mybatis.org/mybatis-3/ja/sqlmap-xml.html#Result_Maps -->
        <!--id: フィールドがIDである事を明示-->
        <id property="id" column="pcs_id" />
        <!--result: id以外の基本型(string, int, Data..)であるの場合に指定-->
        <result property="host_name" column="pcs_host_name" />
        <result property="owner" column="pcs_owner" />
        <!--associate:1対1の関係で利用-->
        <!--collection: 1対多(java側 List<class>)の時に利用-->
        <association property="platform" resultMap="platformResult"/>
    </resultMap>
    <!--platformResult部分のマッピング定義-->
    <resultMap id="platformResult" type="com.example.raise_tech_lesson04.entity.Platform">
        <!--property: java側プロパティ column: SQLのカラム(SQL本体でasによる別名を付けていたら、それを指定する)-->
        <id property="id" column="platforms_id" />
        <result property="name" column="platforms_name" />
    </resultMap>

    <!--sql: 再利用可能なSQLのコードスニペットの定義 https://akiakiblog.net/mybatis-common-sql/ -->
    <!--includeした場所に展開される。thymeleafのfragmentと同じ-->
    <!--bindを使えば変数定義も可能    -->
    <sql id="selectMachines">
        <!--SELECT:データ取得命令 *:全列データ指定 FROM:どの表から(スキーマ名.テーブル名)-->
        select
            <!--Java側のフィールドに対応したデータを返す-->
            <!--as: テーブル＋カラムの別名定義/参照可能場所はresultMap内. on句では参照不可-->
            pcs.id        as pcs_id,
            <!--別テーブルにあるカラムデータを取得-->
            platforms.id   as platforms_id,
            platforms.name as platforms_name,
            pcs.host_name as pcs_host_name,
            pcs.owner     as pcs_owner
            <!--from join on: from, jointのテーブルの結合を行う。条件はon-->
            <!--from,join句ではスペース区切りでエイリアス可能-->
            <!--inner join: 条件にマッチしないレコードはベーステーブルから削除される-->
            <!--outer join: 条件にマッチしないレコードでも残す。nullが入る-->
        from pcs
        inner join platforms
        on pcs.platform_id = platforms.id
    </sql>

    <!--select:データを取得する(SELECT)SQLの定義 etc:insert, update, delete-->
    <!--リレーション関係をもつテーブルからデータの取得-->
    <select id="selectAll" resultMap="MachineInfoResultMap">
        <!--include: sqlスニペットの読み込み-->
        <include refid="selectMachines"></include>
    </select>

    <!--指定IDの機材情報を取得-->
    <!--メソッドの引数が1つの場合parameterTypeを指定。複数の場合は指定しない-->
    <!--メソッドの引数が1つの場合、@Paramは付与しない-->
    <!--引数が１つで、基本データ型ならMyBatisの変数は、どんな名前でも参照可能-->
    <!--引数が複数の場合は、java側に@Paramを付与する(https://qiita.com/5zm/items/0864d6641c65f976d415)-->
    <select id="findById" parameterType="int" resultMap="MachineInfoResultMap">
        <!--include: sqlスニペットの読み込み-->
        <include refid="selectMachines"></include>
        <!--#{id}のidはjava側のid-->
        where pcs.id = #{id}
    </select>

    <!--指定IDの機材を削除-->
    <delete id="deleteById" parameterType="int">
        <!--#{id}のidはjava側のid-->
        delete from pcs where id = #{id}
    </delete>

    <!--機材データの更新-->
    <!--パラメータが1個の場合、明示しなくても各メンバを#{}で参照可能-->
    <!--ネストの場合は#{name.host}-->
    <update id="update">
        <!--各代入行の最後の","を忘れない-->
        update pcs set
            host_name = #{host_name},
            owner = #{owner},
            platform_id = #{platform.id}
        where id = #{id}
    </update>

    <!--新規機材の追加-->
    <!--パラメータが1個の場合、明示しなくても各メンバを#{}で参照可能-->
    <!--ID管理を自動で行う場合、DB側でAuto Incrementを有効にする事。
        そうしないと、新規追加時にidエラーになる(Field 'id' doesn't have a default value)-->
    <insert id="insert">
        <!--テーブルpcsの各要素に対して値を設定する-->
        INSERT INTO pcs (host_name, owner, platform_id)
        VALUES (#{host_name}, #{owner}, #{platform.id} )
    </insert>

    <!--numOfMachines:登録機材数の取得-->
    <select id="numOfMachines" resultType="_int">
        SELECT COUNT(*) FROM pcs;
    </select>
</mapper>
